digraph "classes" {
rankdir=BT
charset="utf-8"
"src.constants.Lex" [color="black", fontcolor="black", label=<{src.constants.Lex|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.constants.Lexeme" [color="black", fontcolor="black", label=<{src.constants.Lexeme|error : str<br ALIGN="LEFT"/>lex<br ALIGN="LEFT"/>line : int<br ALIGN="LEFT"/>symbol : int<br ALIGN="LEFT"/>value : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.constants.States.START" [color="black", fontcolor="black", label=<{src.constants.START|name<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.constants.States" [color="black", fontcolor="black", label=<{src.constants.States|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.lang.lang_base_types.BaseType" [color="black", fontcolor="black", label=<{src.lang.lang_base_types.BaseType|value : Union[int, float, bool]<br ALIGN="LEFT"/>|eq(other)<br ALIGN="LEFT"/><I>from_string</I>(literal: str)<br ALIGN="LEFT"/>neq(other)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.lang.lang_base_types.BinOperations" [color="black", fontcolor="black", label=<{src.lang.lang_base_types.BinOperations|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.lang.lang_base_types.Boolean" [color="black", fontcolor="black", label=<{src.lang.lang_base_types.Boolean|value : bool<br ALIGN="LEFT"/>|and_(other)<br ALIGN="LEFT"/>from_string(literal: str)<br ALIGN="LEFT"/>not_()<br ALIGN="LEFT"/>or_(other)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.lang.lang_base_types.Float" [color="black", fontcolor="black", label=<{src.lang.lang_base_types.Float|value : float<br ALIGN="LEFT"/>|add(other)<br ALIGN="LEFT"/>div(other)<br ALIGN="LEFT"/>from_string(literal: str)<br ALIGN="LEFT"/>mul(other)<br ALIGN="LEFT"/>sub(other)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.lang.lang_base_types.Integer" [color="black", fontcolor="black", label=<{src.lang.lang_base_types.Integer|value : int<br ALIGN="LEFT"/>|add(other)<br ALIGN="LEFT"/>div(other)<br ALIGN="LEFT"/>from_string(literal: str)<br ALIGN="LEFT"/>mod(other)<br ALIGN="LEFT"/>mul(other)<br ALIGN="LEFT"/>sub(other)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.lang.lang_base_types.Number" [color="black", fontcolor="black", label=<{src.lang.lang_base_types.Number|<br ALIGN="LEFT"/>|<I>add</I>(other)<br ALIGN="LEFT"/><I>div</I>(other)<br ALIGN="LEFT"/>gt(other)<br ALIGN="LEFT"/>gte(other)<br ALIGN="LEFT"/>lt(other)<br ALIGN="LEFT"/>lte(other)<br ALIGN="LEFT"/><I>mul</I>(other)<br ALIGN="LEFT"/><I>sub</I>(other)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.lang.lang_base_types.Types" [color="black", fontcolor="black", label=<{src.lang.lang_base_types.Types|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.lexer.handlers.HandlerFactory" [color="black", fontcolor="black", label=<{src.lexer.handlers.HandlerFactory|cache : dict<br ALIGN="LEFT"/>|get_handler(state: States)<br ALIGN="LEFT"/>init_handler(state)<br ALIGN="LEFT"/>renewable(state: States, activated_generator: state_handler)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.lexer.lexer.DebugLexer" [color="black", fontcolor="black", label=<{src.lexer.lexer.DebugLexer|<br ALIGN="LEFT"/>|give_lex(lex: Lex)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.lexer.lexer.Lexer" [color="black", fontcolor="black", label=<{src.lexer.lexer.Lexer|buffer : str<br ALIGN="LEFT"/>errorMessage : str<br ALIGN="LEFT"/>factory<br ALIGN="LEFT"/>index : int<br ALIGN="LEFT"/>line : int<br ALIGN="LEFT"/>source : str<br ALIGN="LEFT"/>state<br ALIGN="LEFT"/>symbol : int<br ALIGN="LEFT"/>|get_char()<br ALIGN="LEFT"/>get_lex()<br ALIGN="LEFT"/>give_lex(lex: Lex)<br ALIGN="LEFT"/>unget_char()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.parser.name_table.TableItem" [color="black", fontcolor="black", label=<{src.parser.name_table.TableItem|is_assigned : bool<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>readonly : bool<br ALIGN="LEFT"/>t_type<br ALIGN="LEFT"/>value : Any<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.parser.parser.Parser" [color="black", fontcolor="black", label=<{src.parser.parser.Parser|lexeme<br ALIGN="LEFT"/>lexer : Generator<br ALIGN="LEFT"/>|parse(): ASTNode<br ALIGN="LEFT"/>print(node: ASTNode)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.tree.tree.ASTAssignment" [color="black", fontcolor="black", label=<{src.tree.tree.ASTAssignment|next_node : NoneType<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>var<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.tree.tree.ASTBinOperation" [color="black", fontcolor="black", label=<{src.tree.tree.ASTBinOperation|left<br ALIGN="LEFT"/>operation<br ALIGN="LEFT"/>right<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.tree.tree.ASTConst" [color="black", fontcolor="black", label=<{src.tree.tree.ASTConst|next_node<br ALIGN="LEFT"/>value : Any<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.tree.tree.ASTDeclaration" [color="black", fontcolor="black", label=<{src.tree.tree.ASTDeclaration|next_node<br ALIGN="LEFT"/>variables<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.tree.tree.ASTForLoop" [color="black", fontcolor="black", label=<{src.tree.tree.ASTForLoop|assignment<br ALIGN="LEFT"/>body<br ALIGN="LEFT"/>condition<br ALIGN="LEFT"/>next_node : NoneType<br ALIGN="LEFT"/>step<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.tree.tree.ASTIf" [color="black", fontcolor="black", label=<{src.tree.tree.ASTIf|branch<br ALIGN="LEFT"/>condition<br ALIGN="LEFT"/>else_branch : Union[ASTNode, None]<br ALIGN="LEFT"/>next_node : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.tree.tree.ASTIn" [color="black", fontcolor="black", label=<{src.tree.tree.ASTIn|variables<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.tree.tree.ASTLoop" [color="black", fontcolor="black", label=<{src.tree.tree.ASTLoop|body<br ALIGN="LEFT"/>condition<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.tree.tree.ASTNode" [color="black", fontcolor="black", label=<{src.tree.tree.ASTNode|a_type<br ALIGN="LEFT"/>next_node : Any<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.tree.tree.ASTOut" [color="black", fontcolor="black", label=<{src.tree.tree.ASTOut|expressions<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.tree.tree.ASTType" [color="black", fontcolor="black", label=<{src.tree.tree.ASTType|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.tree.tree.ASTTyped" [color="black", fontcolor="black", label=<{src.tree.tree.ASTTyped|t_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.tree.tree.ASTUOperation" [color="black", fontcolor="black", label=<{src.tree.tree.ASTUOperation|next_node<br ALIGN="LEFT"/>operand<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.tree.tree.ASTVar" [color="black", fontcolor="black", label=<{src.tree.tree.ASTVar|name : str<br ALIGN="LEFT"/>next_node<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.lang.lang_base_types.Boolean" -> "src.lang.lang_base_types.BaseType" [arrowhead="empty", arrowtail="none"];
"src.lang.lang_base_types.Float" -> "src.lang.lang_base_types.Number" [arrowhead="empty", arrowtail="none"];
"src.lang.lang_base_types.Integer" -> "src.lang.lang_base_types.Number" [arrowhead="empty", arrowtail="none"];
"src.lang.lang_base_types.Number" -> "src.lang.lang_base_types.BaseType" [arrowhead="empty", arrowtail="none"];
"src.lexer.lexer.DebugLexer" -> "src.lexer.lexer.Lexer" [arrowhead="empty", arrowtail="none"];
"src.tree.tree.ASTAssignment" -> "src.tree.tree.ASTNode" [arrowhead="empty", arrowtail="none"];
"src.tree.tree.ASTBinOperation" -> "src.tree.tree.ASTTyped" [arrowhead="empty", arrowtail="none"];
"src.tree.tree.ASTConst" -> "src.tree.tree.ASTTyped" [arrowhead="empty", arrowtail="none"];
"src.tree.tree.ASTDeclaration" -> "src.tree.tree.ASTTyped" [arrowhead="empty", arrowtail="none"];
"src.tree.tree.ASTForLoop" -> "src.tree.tree.ASTNode" [arrowhead="empty", arrowtail="none"];
"src.tree.tree.ASTIf" -> "src.tree.tree.ASTNode" [arrowhead="empty", arrowtail="none"];
"src.tree.tree.ASTIn" -> "src.tree.tree.ASTNode" [arrowhead="empty", arrowtail="none"];
"src.tree.tree.ASTLoop" -> "src.tree.tree.ASTNode" [arrowhead="empty", arrowtail="none"];
"src.tree.tree.ASTOut" -> "src.tree.tree.ASTNode" [arrowhead="empty", arrowtail="none"];
"src.tree.tree.ASTTyped" -> "src.tree.tree.ASTNode" [arrowhead="empty", arrowtail="none"];
"src.tree.tree.ASTUOperation" -> "src.tree.tree.ASTTyped" [arrowhead="empty", arrowtail="none"];
"src.tree.tree.ASTVar" -> "src.tree.tree.ASTTyped" [arrowhead="empty", arrowtail="none"];
"src.constants.Lex" -> "src.constants.Lexeme" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lex", style="solid"];
"src.constants.States.START" -> "src.lexer.lexer.Lexer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="state", style="solid"];
"src.lang.lang_base_types.BinOperations" -> "src.tree.tree.ASTBinOperation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="operation", style="solid"];
"src.lang.lang_base_types.Types" -> "src.parser.name_table.TableItem" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t_type", style="solid"];
"src.lang.lang_base_types.Types" -> "src.tree.tree.ASTTyped" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t_type", style="solid"];
"src.lexer.handlers.HandlerFactory" -> "src.lexer.lexer.Lexer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="factory", style="solid"];
"src.tree.tree.ASTAssignment" -> "src.tree.tree.ASTForLoop" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="assignment", style="solid"];
"src.tree.tree.ASTBinOperation" -> "src.tree.tree.ASTForLoop" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="condition", style="solid"];
"src.tree.tree.ASTConst" -> "src.tree.tree.ASTConst" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTConst" -> "src.tree.tree.ASTUOperation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTNode" -> "src.tree.tree.ASTForLoop" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="body", style="solid"];
"src.tree.tree.ASTNode" -> "src.tree.tree.ASTIf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="branch", style="solid"];
"src.tree.tree.ASTNode" -> "src.tree.tree.ASTLoop" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="body", style="solid"];
"src.tree.tree.ASTType" -> "src.tree.tree.ASTNode" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a_type", style="solid"];
"src.tree.tree.ASTTyped" -> "src.tree.tree.ASTAssignment" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"src.tree.tree.ASTTyped" -> "src.tree.tree.ASTBinOperation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="left", style="solid"];
"src.tree.tree.ASTTyped" -> "src.tree.tree.ASTBinOperation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="right", style="solid"];
"src.tree.tree.ASTTyped" -> "src.tree.tree.ASTForLoop" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="step", style="solid"];
"src.tree.tree.ASTTyped" -> "src.tree.tree.ASTIf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="condition", style="solid"];
"src.tree.tree.ASTTyped" -> "src.tree.tree.ASTLoop" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="condition", style="solid"];
"src.tree.tree.ASTTyped" -> "src.tree.tree.ASTOut" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="expressions", style="solid"];
"src.tree.tree.ASTTyped" -> "src.tree.tree.ASTUOperation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="operand", style="solid"];
"src.tree.tree.ASTUOperation" -> "src.tree.tree.ASTConst" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTUOperation" -> "src.tree.tree.ASTUOperation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTVar" -> "src.tree.tree.ASTAssignment" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="var", style="solid"];
"src.tree.tree.ASTVar" -> "src.tree.tree.ASTConst" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTVar" -> "src.tree.tree.ASTDeclaration" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="variables", style="solid"];
"src.tree.tree.ASTVar" -> "src.tree.tree.ASTIn" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="variables", style="solid"];
"src.tree.tree.ASTVar" -> "src.tree.tree.ASTUOperation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTVar" -> "src.tree.tree.ASTVar" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTVar" -> "src.tree.tree.ASTVar" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTAssignment" -> "src.tree.tree.ASTAssignment" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTAssignment" -> "src.tree.tree.ASTDeclaration" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTAssignment" -> "src.tree.tree.ASTIf" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTDeclaration" -> "src.tree.tree.ASTAssignment" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTDeclaration" -> "src.tree.tree.ASTDeclaration" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTDeclaration" -> "src.tree.tree.ASTForLoop" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTDeclaration" -> "src.tree.tree.ASTIf" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTForLoop" -> "src.tree.tree.ASTAssignment" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTForLoop" -> "src.tree.tree.ASTDeclaration" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTForLoop" -> "src.tree.tree.ASTForLoop" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTForLoop" -> "src.tree.tree.ASTIf" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTIf" -> "src.tree.tree.ASTAssignment" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTIf" -> "src.tree.tree.ASTDeclaration" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTIf" -> "src.tree.tree.ASTForLoop" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTIf" -> "src.tree.tree.ASTIf" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTIn" -> "src.tree.tree.ASTAssignment" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTIn" -> "src.tree.tree.ASTDeclaration" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTIn" -> "src.tree.tree.ASTForLoop" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTIn" -> "src.tree.tree.ASTIf" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTLoop" -> "src.tree.tree.ASTAssignment" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTLoop" -> "src.tree.tree.ASTDeclaration" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTLoop" -> "src.tree.tree.ASTForLoop" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
"src.tree.tree.ASTLoop" -> "src.tree.tree.ASTIf" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="next_node", style="solid"];
}
